heat_template_version: 2013-05-23
description: Create VM, network and security group for Big Data testing 

parameters:
    
  image_centos_7:
    type: string
    label: Image name or ID
    description: Image used for all nodo in big data cluster (CentOS7)
    default: 71a37209-fff8-4e44-ba8c-97cf1e6eb35f 

  flavor_to_use:
    type: string
    label: Flavor name 
    description: Flavor used for all nodos in big data cluster
    default: cldareapd.medium
  
  key_name_user:
    type: string
    label: Public ssh key of one user.
    description: Public ssh key of one user.
    default: pub

  tenant_net_name:
    type: string
    label: Network ID of the tenant
    description: This parameter has been set with the id of the tenant network. If you have more than one choose one of thoose.
    default: c0326d8a-6959-4111-9cf6-0021a1b55eb9
 
  tenant_subnet_name:
    type: string
    label: Sub network of the tenant
    description: This parameter has been set with the name of the tenant sub network. If you have more than one choose one of thoose.
    default: "sub-CMS-lan"
  
  fixed_ip_nodo_1:
    type: string
    label: Fixed ip for nodo1 host
    description: Fixed ip for nodo1 host
    default: "10.64.22.90"

  fixed_ip_nodo_2:
    type: string
    label: Fixed ip for nodo2 host
    description: Fixed ip for nodo2 host
    default: "10.64.22.91"

  fixed_ip_nodo_3:
    type: string
    label: Fixed ip for nodo3 host
    description: Fixed ip for nodo3 host
    default: "10.64.22.92"

  fixed_ip_nodo_4:
    type: string
    label: Fixed ip for nodo4 host
    description: Fixed ip for nodo4 host
    default: "10.64.22.94"

  fixed_ip_nodo_5:
    type: string
    label: Fixed ip for nodo5 host
    description: Fixed ip for nodo5 host
    default: "10.64.22.95"


resources:
  
  root_pw:
   type: OS::Heat::RandomString
   properties:
      length: 8 

  hadoop_pw:
   type: OS::Heat::RandomString
   properties:
      length: 8


  sshPingBigData_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Access to ssh, ping, mesos, marathon, chronos connections for all VM in this security group"
      name: "sshPingBigdataMesos"
      rules: [{"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 22, "remote_mode": remote_ip_prefix, "port_range_max": 22, "protocol": TCP}, {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 5050, "remote_mode": remote_ip_prefix, "port_range_max": 5050, "protocol": TCP}, {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 5051, "remote_mode": remote_ip_prefix, "port_range_max": 5051, "protocol": TCP}, {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 8080, "remote_mode": remote_ip_prefix, "port_range_max": 8080, "protocol": TCP}, {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 4400, "remote_mode": remote_ip_prefix, "port_range_max": 4400, "protocol": TCP}, {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 7077, "remote_mode": remote_ip_prefix, "port_range_max": 7077, "protocol": TCP}, {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 2181, "remote_mode": remote_ip_prefix, "port_range_max": 2181, "protocol": TCP},  {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 2888, "remote_mode": remote_ip_prefix, "port_range_max": 3888, "protocol": TCP}, {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "remote_mode": remote_ip_prefix, "protocol": ICMP}]


  pnodo1_server_port:
    type: OS::Neutron::Port
    properties:
      name: "pnodo1-server-port"
      network_id: { get_param: tenant_net_name }
      fixed_ips:
        - { ip_address: { get_param: fixed_ip_nodo_1 }, subnet: { get_param: tenant_subnet_name } }
      security_groups: [{Ref: sshPingBigData_sg},]

  nodo1_server_instance:
    type: OS::Nova::Server
    properties:
      name: "mesosmaster"
      key_name: { get_param: key_name_user }
      image: { get_param: image_centos_7 } 
      flavor: { get_param: flavor_to_use }
      networks:
        - port: { get_resource: pnodo1_server_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
           #!/bin/bash
           echo -n root:$ROOT_PW | chpasswd
           sed -i s/"PermitRootLogin without-password$"/"PermitRootLogin yes"/ /etc/ssh/sshd_config
           sed -i s/"PasswordAuthentication no$"/"PasswordAuthentication yes"/ /etc/ssh/sshd_config
           service sshd restart
           cat > /etc/hosts << EOF
           $IP_FIX_NODE1    mesosmaster.novalocal mesosmaster
           $IP_FIX_NODE2    mesosslave1.novalocal mesosslave1
           $IP_FIX_NODE3    mesosslave2.novalocal mesosslave2
           $IP_FIX_NODE4    mesosslave3.novalocal mesosslave3
           $IP_FIX_NODE5    mesosslave4.novalocal mesosslave4
           127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
           ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
           EOF
           yum update
           yum install -y ntp tar wget git telnet
           cat > /etc/hostname  << EOF
           mesosmaster.novalocal mesosmaster
           EOF
           yum localinstall -y http://repos.mesosphere.com/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm 
           yum localinstall -y http://archive.cloudera.com/cdh5/one-click-install/redhat/7/x86_64/cloudera-cdh-5-0.x86_64.rpm
           yum -y install http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm
           yum install -y mesos marathon chronos docker
           yum install -y zookeeper-server
           systemctl stop mesos-master
           systemctl stop mesos-slave
           systemctl stop marathon
           systemctl stop chronos
           systemctl stop zookeeper-server
           curl -k -X PUT -H 'Content-Type:application/json' \
                   -d '{"Status" : "SUCCESS","Reason" : "Configuration OK","UniqueId" : "NODO1","Data" : "Nodo1 started Configured."}' \
                   "$wait_handle$"
           sed -i 0,/'requiretty'/{s/'requiretty'/'!requiretty'/} /etc/sudoers
           sudo -u zookeeper /bin/zookeeper-server-initialize --myid=1
           cat >> /etc/zookeeper/conf/zoo.cfg << EOF
           server.1=$IP_FIX_NODE1:2888:3888
           EOF
           systemctl restart zookeeper-server
           cat > /etc/mesos/zk << EOF
           zk://$IP_FIX_NODE1:2181/mesos
           EOF
           cat > /etc/mesos-master/hostname << EOF
           $IP_FIX_NODE1 
           EOF
           cat > /etc/mesos-master/ip << EOF
           $IP_FIX_NODE1
           EOF
           cat > /etc/mesos-master/quorum  << EOF
           1
           EOF
           mkdir -p /etc/marathon/conf
           cat > /etc/marathon/conf/hostname << EOF
           $IP_FIX_NODE1
           EOF
           cat > /etc/marathon/conf/task_launch_timeout << EOF
           30000
           EOF
           yum -y install sshpass
           cd /opt
           wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz"
           tar -zxf /opt/jdk-8u161-linux-x64.tar.gz
           mv jdk1.8.0_161 jdk
           alternatives --install /usr/bin/java java /opt/jdk/bin/java 2
           alternatives --install /usr/bin/jar jar /opt/jdk/bin/jar 2
           alternatives --install /usr/bin/javac javac /opt/jdk/bin/javac 2
           alternatives --set jar /opt/jdk/bin/jar
           alternatives --set javac /opt/jdk/bin/javac 
           alternatives --set java /opt/jdk/bin/java
           cat >> /etc/bashrc << EOF
           export JAVA_HOME=/opt/jdk
           export JRE_HOME=/opt/jdk/jre
           export PATH=$PATH:/opt/jdk/bin:/opt/jdk/jre/bin
           EOF
           cat >> /etc/sysctl.conf << EOF
           net.ipv6.conf.all.disable_ipv6 = 1
           net.ipv6.conf.default.disable_ipv6 = 1
           EOF
           systemctl restart mesos-master
          params:
            $ROOT_PW: {get_resource: root_pw}
            $IP_FIX_NODE1: {get_param: fixed_ip_nodo_1}
            $IP_FIX_NODE2: {get_param: fixed_ip_nodo_2}
            $IP_FIX_NODE3: {get_param: fixed_ip_nodo_3}
            $IP_FIX_NODE4: {get_param: fixed_ip_nodo_4}
            $IP_FIX_NODE5: {get_param: fixed_ip_nodo_5}
            $wait_handle$: { get_resource: nodo1_instance_wait_handle }

  nodo1_instance_wait:
    type: "AWS::CloudFormation::WaitCondition"
    depends_on: nodo1_server_instance 
    properties:
      Handle:
        get_resource: nodo1_instance_wait_handle
      Timeout: 3600

  nodo1_instance_wait_handle:
    type: "AWS::CloudFormation::WaitConditionHandle"
  

  pnodo2_server_port:
    type: OS::Neutron::Port
    properties:
      name: "pnodo2-server-port"
      network_id: { get_param: tenant_net_name } 
      fixed_ips:
        - { ip_address: { get_param: fixed_ip_nodo_2 }, subnet: { get_param: tenant_subnet_name } }
      security_groups: [{Ref: sshPingBigData_sg},]

  nodo2_server_instance:
    type: OS::Nova::Server
    depends_on: nodo1_instance_wait
    properties:
      name: "mesosslave1"
      key_name: { get_param: key_name_user }
      image: { get_param: image_centos_7 }
      flavor: { get_param: flavor_to_use }
      networks:
        - port: { get_resource: pnodo2_server_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
           #!/bin/bash
           echo -n root:$ROOT_PW | chpasswd
           sed -i s/"PermitRootLogin without-password$"/"PermitRootLogin yes"/ /etc/ssh/sshd_config
           sed -i s/"PasswordAuthentication no$"/"PasswordAuthentication yes"/ /etc/ssh/sshd_config
           service sshd restart
           cat > /etc/hosts << EOF
           $IP_FIX_NODE1    mesosmaster.novalocal mesosmaster
           $IP_FIX_NODE2    mesosslave1.novalocal mesosslave1
           $IP_FIX_NODE3    mesosslave2.novalocal mesosslave2
           $IP_FIX_NODE4    mesosslave3.novalocal mesosslave3
           $IP_FIX_NODE5    mesosslave4.novalocal mesosslave4
           127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
           ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
           EOF
           curl -k -X PUT -H 'Content-Type:application/json' \
                   -d '{"Status" : "SUCCESS","Reason" : "Configuration OK","UniqueId" : "NODO2","Data" : "Nodo2 started Configured."}' \
                   "$wait_handle$"
           yum update
           yum install -y ntp tar wget git telnet
           cat > /etc/hostname  << EOF
           mesosslave1.novalocal mesosslave1
           EOF
           yum localinstall -y http://repos.mesosphere.com/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm
           yum localinstall -y http://archive.cloudera.com/cdh5/one-click-install/redhat/7/x86_64/cloudera-cdh-5-0.x86_64.rpm
           yum -y install http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm
           yum install -y mesos docker
           systemctl stop mesos-slave
           cat > /etc/mesos/zk << EOF
           zk://$IP_FIX_NODE1:2181/mesos
           EOF
           cat > /etc/mesos-slave/hostname << EOF
           $IP_FIX_NODE2
           EOF
           cat > /etc/mesos-slave/ip << EOF
           $IP_FIX_NODE2
           EOF
           cat > /etc/mesos-slave/containerizers << EOF
           docker,mesos
           EOF
           cat > /etc/mesos-slave/executor_registration_timeout << EOF
           5mins
           EOF
           yum -y install sshpass
           cd /opt
           wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz"
           tar -zxf /opt/jdk-8u161-linux-x64.tar.gz
           mv jdk1.8.0_161 jdk
           alternatives --install /usr/bin/java java /opt/jdk/bin/java 2
           alternatives --install /usr/bin/jar jar /opt/jdk/bin/jar 2
           alternatives --install /usr/bin/javac javac /opt/jdk/bin/javac 2
           alternatives --set jar /opt/jdk/bin/jar
           alternatives --set javac /opt/jdk/bin/javac
           alternatives --set java /opt/jdk/bin/java
           cat >> /etc/bashrc << EOF
           export JAVA_HOME=/opt/jdk
           export JRE_HOME=/opt/jdk/jre
           export PATH=$PATH:/opt/jdk/bin:/opt/jdk/jre/bin
           EOF
           cat >> /etc/sysctl.conf << EOF
           net.ipv6.conf.all.disable_ipv6 = 1
           net.ipv6.conf.default.disable_ipv6 = 1
           EOF
           systemctl restart docker
           systemctl restart mesos-slave
          params:
            $ROOT_PW: {get_resource: root_pw}
            $IP_FIX_NODE1: {get_param: fixed_ip_nodo_1}
            $IP_FIX_NODE2: {get_param: fixed_ip_nodo_2}
            $IP_FIX_NODE3: {get_param: fixed_ip_nodo_3}
            $IP_FIX_NODE4: {get_param: fixed_ip_nodo_4}
            $IP_FIX_NODE5: {get_param: fixed_ip_nodo_5}
            $wait_handle$: { get_resource: nodo2_instance_wait_handle }

  nodo2_instance_wait:
    type: "AWS::CloudFormation::WaitCondition"
    depends_on: nodo2_server_instance
    properties:
      Handle:
        get_resource: nodo2_instance_wait_handle
      Timeout: 3600

  nodo2_instance_wait_handle:
    type: "AWS::CloudFormation::WaitConditionHandle"


  pnodo3_server_port:
    type: OS::Neutron::Port
    properties:
      name: "pnodo3-server-port"
      network_id: { get_param: tenant_net_name } 
      fixed_ips:
        - { ip_address: { get_param: fixed_ip_nodo_3 }, subnet: { get_param: tenant_subnet_name } }
      security_groups: [{Ref: sshPingBigData_sg},]

  nodo3_server_instance:
    type: OS::Nova::Server
    depends_on: nodo2_instance_wait
    properties:
      name: "mesosslave2"
      key_name: { get_param: key_name_user }
      image: { get_param: image_centos_7 }
      flavor: { get_param: flavor_to_use } 
      networks:
        - port: { get_resource: pnodo3_server_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
           #!/bin/bash
           echo -n root:$ROOT_PW | chpasswd
           sed -i s/"PermitRootLogin without-password$"/"PermitRootLogin yes"/ /etc/ssh/sshd_config
           sed -i s/"PasswordAuthentication no$"/"PasswordAuthentication yes"/ /etc/ssh/sshd_config
           service sshd restart
           cat > /etc/hosts << EOF
           $IP_FIX_NODE1    mesosmaster.novalocal mesosmaster
           $IP_FIX_NODE2    mesosslave1.novalocal mesosslave1
           $IP_FIX_NODE3    mesosslave2.novalocal mesosslave2
           $IP_FIX_NODE4    mesosslave3.novalocal mesosslave3
           $IP_FIX_NODE5    mesosslave4.novalocal mesosslave4
           127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
           ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
           EOF
           curl -k -X PUT -H 'Content-Type:application/json' \
                   -d '{"Status" : "SUCCESS","Reason" : "Configuration OK","UniqueId" : "NODO3","Data" : "Nodo3 started Configured."}' \
                   "$wait_handle$"
           yum update
           yum install -y ntp tar wget git telnet
           cat > /etc/hostname  << EOF
           mesosslave2.novalocal mesosslave2
           EOF
           yum localinstall -y http://repos.mesosphere.com/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm
           yum localinstall -y http://archive.cloudera.com/cdh5/one-click-install/redhat/7/x86_64/cloudera-cdh-5-0.x86_64.rpm
           yum -y install http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm
           yum install -y mesos docker
           systemctl stop mesos-slave
           cat > /etc/mesos/zk << EOF
           zk://$IP_FIX_NODE1:2181/mesos
           EOF
           cat > /etc/mesos-slave/hostname << EOF
           $IP_FIX_NODE3
           EOF
           cat > /etc/mesos-slave/ip << EOF
           $IP_FIX_NODE3
           EOF
           cat > /etc/mesos-slave/containerizers << EOF
           docker,mesos
           EOF
           cat > /etc/mesos-slave/executor_registration_timeout << EOF
           5mins
           EOF
           yum -y install sshpass
           cd /opt
           wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz"
           tar -zxf /opt/jdk-8u161-linux-x64.tar.gz
           mv jdk1.8.0_161 jdk
           alternatives --install /usr/bin/java java /opt/jdk/bin/java 2
           alternatives --install /usr/bin/jar jar /opt/jdk/bin/jar 2
           alternatives --install /usr/bin/javac javac /opt/jdk/bin/javac 2
           alternatives --set jar /opt/jdk/bin/jar
           alternatives --set javac /opt/jdk/bin/javac
           alternatives --set java /opt/jdk/bin/java
           cat >> /etc/bashrc << EOF
           export JAVA_HOME=/opt/jdk
           export JRE_HOME=/opt/jdk/jre
           export PATH=$PATH:/opt/jdk/bin:/opt/jdk/jre/bin
           EOF
           cat >> /etc/sysctl.conf << EOF
           net.ipv6.conf.all.disable_ipv6 = 1
           net.ipv6.conf.default.disable_ipv6 = 1
           EOF
           systemctl restart docker
           systemctl restart mesos-slave
          params:
            $ROOT_PW: {get_resource: root_pw}
            $IP_FIX_NODE1: {get_param: fixed_ip_nodo_1}
            $IP_FIX_NODE2: {get_param: fixed_ip_nodo_2}
            $IP_FIX_NODE3: {get_param: fixed_ip_nodo_3}
            $IP_FIX_NODE4: {get_param: fixed_ip_nodo_4}
            $IP_FIX_NODE5: {get_param: fixed_ip_nodo_5}
            $wait_handle$: { get_resource: nodo3_instance_wait_handle }

  nodo3_instance_wait:
    type: "AWS::CloudFormation::WaitCondition"
    depends_on: nodo3_server_instance
    properties:
      Handle:
        get_resource: nodo3_instance_wait_handle
      Timeout: 3600

  nodo3_instance_wait_handle:
    type: "AWS::CloudFormation::WaitConditionHandle"

  pnodo4_server_port:
    type: OS::Neutron::Port
    properties:
      name: "pnodo4-server-port"
      network_id: { get_param: tenant_net_name } 
      fixed_ips:
        - { ip_address: { get_param: fixed_ip_nodo_4 }, subnet: { get_param: tenant_subnet_name } }
      security_groups: [{Ref: sshPingBigData_sg},]

  nodo4_server_instance:
    type: OS::Nova::Server
    depends_on: nodo3_instance_wait
    properties:
      name: "mesosslave3"
      key_name: { get_param: key_name_user }
      image: { get_param: image_centos_7 }
      flavor: { get_param: flavor_to_use }
      networks:
        - port: { get_resource: pnodo4_server_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
           #!/bin/bash
           echo -n root:$ROOT_PW | chpasswd
           sed -i s/"PermitRootLogin without-password$"/"PermitRootLogin yes"/ /etc/ssh/sshd_config
           sed -i s/"PasswordAuthentication no$"/"PasswordAuthentication yes"/ /etc/ssh/sshd_config
           service sshd restart
           cat > /etc/hosts << EOF
           $IP_FIX_NODE1    mesosmaster.novalocal mesosmaster
           $IP_FIX_NODE2    mesosslave1.novalocal mesosslave1
           $IP_FIX_NODE3    mesosslave2.novalocal mesosslave2
           $IP_FIX_NODE4    mesosslave3.novalocal mesosslave3
           $IP_FIX_NODE5    mesosslave4.novalocal mesosslave4
           127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
           ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
           EOF
           curl -k -X PUT -H 'Content-Type:application/json' \
                   -d '{"Status" : "SUCCESS","Reason" : "Configuration OK","UniqueId" : "NODO4","Data" : "Nodo4 started Configured."}' \
                   "$wait_handle$"
           yum update
           yum install -y ntp tar wget git telnet
           cat > /etc/hostname  << EOF
           mesosslave3.novalocal mesosslave3
           EOF
           yum localinstall -y http://repos.mesosphere.com/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm
           yum localinstall -y http://archive.cloudera.com/cdh5/one-click-install/redhat/7/x86_64/cloudera-cdh-5-0.x86_64.rpm
           yum -y install http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm
           yum install -y mesos docker
           systemctl stop mesos-slave
           cat > /etc/mesos/zk << EOF
           zk://$IP_FIX_NODE1:2181/mesos
           EOF
           cat > /etc/mesos-slave/hostname << EOF
           $IP_FIX_NODE4
           EOF
           cat > /etc/mesos-slave/ip << EOF
           $IP_FIX_NODE4
           EOF
           cat > /etc/mesos-slave/containerizers << EOF
           docker,mesos
           EOF
           cat > /etc/mesos-slave/executor_registration_timeout << EOF
           5mins
           EOF
           cd /opt
           wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz"
           tar -zxf /opt/jdk-8u161-linux-x64.tar.gz
           mv jdk1.8.0_161 jdk
           alternatives --install /usr/bin/java java /opt/jdk/bin/java 2
           alternatives --install /usr/bin/jar jar /opt/jdk/bin/jar 2
           alternatives --install /usr/bin/javac javac /opt/jdk/bin/javac 2
           alternatives --set jar /opt/jdk/bin/jar
           alternatives --set javac /opt/jdk/bin/javac
           alternatives --set java /opt/jdk/bin/java
           cat >> /etc/bashrc << EOF
           export JAVA_HOME=/opt/jdk
           export JRE_HOME=/opt/jdk/jre
           export PATH=$PATH:/opt/jdk/bin:/opt/jdk/jre/bin
           EOF
           cat >> /etc/sysctl.conf << EOF
           net.ipv6.conf.all.disable_ipv6 = 1
           net.ipv6.conf.default.disable_ipv6 = 1
           EOF
           systemctl restart docker
           systemctl restart mesos-slave
          params:
            $ROOT_PW: {get_resource: root_pw}
            $IP_FIX_NODE1: {get_param: fixed_ip_nodo_1}
            $IP_FIX_NODE2: {get_param: fixed_ip_nodo_2}
            $IP_FIX_NODE3: {get_param: fixed_ip_nodo_3}
            $IP_FIX_NODE4: {get_param: fixed_ip_nodo_4}
            $IP_FIX_NODE5: {get_param: fixed_ip_nodo_5}
            $wait_handle$: { get_resource: nodo4_instance_wait_handle }

  nodo4_instance_wait:
    type: "AWS::CloudFormation::WaitCondition"
    depends_on: nodo4_server_instance
    properties:
      Handle:
        get_resource: nodo4_instance_wait_handle
      Timeout: 3600

  nodo4_instance_wait_handle:
    type: "AWS::CloudFormation::WaitConditionHandle"

  pnodo5_server_port:
    type: OS::Neutron::Port
    properties:
      name: "pnodo5-server-port"
      network_id: { get_param: tenant_net_name }
      fixed_ips:
        - { ip_address: { get_param: fixed_ip_nodo_5 }, subnet: { get_param: tenant_subnet_name } }
      security_groups: [{Ref: sshPingBigData_sg},]
  
  nodo5_server_instance:
    type: OS::Nova::Server
    depends_on: nodo4_instance_wait
    properties:
      name: "mesosslave4"
      key_name: { get_param: key_name_user }
      image: { get_param: image_centos_7 }
      flavor: { get_param: flavor_to_use } 
      networks:
        - port: { get_resource: pnodo5_server_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
           #!/bin/bash
           echo -n root:$ROOT_PW | chpasswd
           sed -i s/"PermitRootLogin without-password$"/"PermitRootLogin yes"/ /etc/ssh/sshd_config
           sed -i s/"PasswordAuthentication no$"/"PasswordAuthentication yes"/ /etc/ssh/sshd_config
           service sshd restart
           cat > /etc/hosts << EOF
           $IP_FIX_NODE1    mesosmaster.novalocal mesosmaster
           $IP_FIX_NODE2    mesosslave1.novalocal mesosslave1
           $IP_FIX_NODE3    mesosslave2.novalocal mesosslave2
           $IP_FIX_NODE4    mesosslave3.novalocal mesosslave3
           $IP_FIX_NODE5    mesosslave4.novalocal mesosslave4
           127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
           ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
           EOF
           curl -k -X PUT -H 'Content-Type:application/json' \
                   -d '{"Status" : "SUCCESS","Reason" : "Configuration OK","UniqueId" : "NODO5","Data" : "Nodo5 started Configured."}' \
                   "$wait_handle$"
           yum update
           yum install -y ntp tar wget git telnet
           cat > /etc/hostname  << EOF
           mesosslave4.novalocal mesosslave4
           EOF
           yum localinstall -y http://repos.mesosphere.com/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm
           yum localinstall -y http://archive.cloudera.com/cdh5/one-click-install/redhat/7/x86_64/cloudera-cdh-5-0.x86_64.rpm
           yum -y install http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm
           yum install -y mesos docker
           systemctl stop mesos-slave
           cat > /etc/mesos/zk << EOF
           zk://$IP_FIX_NODE1:2181/mesos
           EOF
           cat > /etc/mesos-slave/hostname << EOF
           $IP_FIX_NODE5
           EOF
           cat > /etc/mesos-slave/ip << EOF
           $IP_FIX_NODE5
           EOF
           cat > /etc/mesos-slave/containerizers << EOF
           docker,mesos
           EOF
           cat > /etc/mesos-slave/executor_registration_timeout << EOF
           5mins
           EOF
           cd /opt
           wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz"
           tar -zxf /opt/jdk-8u161-linux-x64.tar.gz
           mv jdk1.8.0_161 jdk
           alternatives --install /usr/bin/java java /opt/jdk/bin/java 2
           alternatives --install /usr/bin/jar jar /opt/jdk/bin/jar 2
           alternatives --install /usr/bin/javac javac /opt/jdk/bin/javac 2
           alternatives --set jar /opt/jdk/bin/jar
           alternatives --set javac /opt/jdk/bin/javac
           alternatives --set java /opt/jdk/bin/java
           cat >> /etc/bashrc << EOF
           export JAVA_HOME=/opt/jdk
           export JRE_HOME=/opt/jdk/jre
           export PATH=$PATH:/opt/jdk/bin:/opt/jdk/jre/bin
           EOF
           cat >> /etc/sysctl.conf << EOF
           net.ipv6.conf.all.disable_ipv6 = 1
           net.ipv6.conf.default.disable_ipv6 = 1
           EOF
           systemctl restart docker
           systemctl restart mesos-slave
          params:
            $ROOT_PW: {get_resource: root_pw}
            $IP_FIX_NODE1: {get_param: fixed_ip_nodo_1}
            $IP_FIX_NODE2: {get_param: fixed_ip_nodo_2}
            $IP_FIX_NODE3: {get_param: fixed_ip_nodo_3}
            $IP_FIX_NODE4: {get_param: fixed_ip_nodo_4}
            $IP_FIX_NODE5: {get_param: fixed_ip_nodo_5}

outputs:
  root_pw:
    description: root pwd to access to all VMs in mesos cluster
    value: {get_resource: root_pw}
